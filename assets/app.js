angular.module("appLearn",["ngRoute"]),angular.module("appLearn").controller("ApplicationController",["$scope","$location",function(e,t){e.$on("login",function(t,n){e.currentUser=n}),e.logout=function(){delete e.currentUser,t.path("/")}}]),angular.module("appLearn").controller("LoginController",["$scope","$location","UserSvc",function(e,t,n){e.login=function(o,r){n.login(o,r).then(function(n){e.$emit("login",n.data),n.data&&t.path("/")})}}]),angular.module("appLearn").controller("MissatgesController",["$scope","$location","MissatgesService",function(e,t,n){n.fetch().success(function(t){e.missatges=t}).error(function(e){console.log(e)}),e.esborrarMissatge=function(e){n["delete"](e._id).success(function(){t.path("/")})}}]),angular.module("appLearn").service("MissatgesService",["$http",function(e){this.fetch=function(){return e.get("/api/missatges")},this.create=function(t){return e.post("/api/missatges",t)},this["delete"]=function(t){return console.log(t),e["delete"]("/api/missatges/"+t)}}]),angular.module("appLearn").controller("NouMissatgeController",["$scope","$location","MissatgesService",function(e,t,n){e.afegirMissatge=function(){console.log(e.missatgeBody),e.missatgeBody&&n.create({body:e.missatgeBody}).success(function(){t.path("/")})}}]),angular.module("appLearn").config(["$routeProvider",function(e){e.when("/",{controller:"MissatgesController",templateUrl:"missatges.html"}).when("/noumissatge",{controller:"NouMissatgeController",templateUrl:"nouMissatge.html"}).when("/registre",{controller:"RegisterController",templateUrl:"register.html"}).when("/login",{controller:"LoginController",templateUrl:"login.html"})}]),angular.module("appLearn").service("UserSvc",["$http",function(e){var t=this;t.getUser=function(){return e.get("/api/users")},t.login=function(n,o){return e.post("/api/sessions",{username:n,password:o}).then(function(n){return t.token=n.data,e.defaults.headers.common["x-auth"]=n.data,t.getUser()})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwibWlzc2F0Z2VzLmN0cmwuanMiLCJtaXNzYXRnZXMuc3ZjLmpzIiwibm91TWlzc2F0Z2UuY3RybC5qcyIsInJvdXRlcy5qcyIsInVzZXIuc3ZjLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJGxvY2F0aW9uIiwiJG9uIiwiZSIsInVzZXIiLCJjdXJyZW50VXNlciIsImxvZ291dCIsInBhdGgiLCJVc2VyU3ZjIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsIiRlbWl0IiwiZGF0YSIsIk1pc3NhdGdlc1NlcnZpY2UiLCJmZXRjaCIsInN1Y2Nlc3MiLCJtaXNzYXRnZXMiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJlc2JvcnJhck1pc3NhdGdlIiwibWlzc2F0Z2UiLCJfaWQiLCJzZXJ2aWNlIiwiJGh0dHAiLCJ0aGlzIiwiZ2V0IiwiY3JlYXRlIiwicG9zdCIsImlkIiwiYWZlZ2lyTWlzc2F0Z2UiLCJtaXNzYXRnZUJvZHkiLCJib2R5IiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJzdmMiLCJnZXRVc2VyIiwidmFsIiwidG9rZW4iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFBQyxPQUFBLFlBQUEsWUNBQUQsUUFBQUMsT0FBQSxZQUNBQyxXQUFBLHlCQUFBLFNBQUEsWUFBQSxTQUFBQyxFQUFBQyxHQUNBRCxFQUFBRSxJQUFBLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUosRUFBQUssWUFBQUQsSUFFQUosRUFBQU0sT0FBQSxpQkFDQU4sR0FBQUssWUFDQUosRUFBQU0sS0FBQSxTQ1BBVixRQUFBQyxPQUFBLFlBQ0FDLFdBQUEsbUJBQUEsU0FBQSxZQUFBLFVBQUEsU0FBQUMsRUFBQUMsRUFBQU8sR0FDQVIsRUFBQVMsTUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBQyxNQUFBQyxFQUFBQyxHQUNBQyxLQUFBLFNBQUFSLEdBQ0FKLEVBQUFhLE1BQUEsUUFBQVQsRUFBQVUsTUFDQVYsRUFBQVUsTUFBQWIsRUFBQU0sS0FBQSxXQ05BVixRQUFBQyxPQUFBLFlBQ0FDLFdBQUEsdUJBQUEsU0FBQSxZQUFBLG1CQUFBLFNBQUFDLEVBQUFDLEVBQUFjLEdBRUFBLEVBQUFDLFFBQ0FDLFFBQUEsU0FBQUMsR0FDQWxCLEVBQUFrQixVQUFBQSxJQUVBQyxNQUFBLFNBQUFoQixHQUNBaUIsUUFBQUMsSUFBQWxCLEtBSUFILEVBQUFzQixpQkFBQSxTQUFBQyxHQUNBUixFQUFBQSxVQUFBUSxFQUFBQyxLQUFBUCxRQUFBLFdBQ0FoQixFQUFBTSxLQUFBLFdDZEFWLFFBQUFDLE9BQUEsWUFDQTJCLFFBQUEsb0JBQUEsUUFBQSxTQUFBQyxHQUNBQyxLQUFBWCxNQUFBLFdBQ0EsTUFBQVUsR0FBQUUsSUFBQSxtQkFFQUQsS0FBQUUsT0FBQSxTQUFBTixHQUNBLE1BQUFHLEdBQUFJLEtBQUEsaUJBQUFQLElBRUFJLEtBQUFBLFVBQUEsU0FBQUksR0FFQSxNQURBWCxTQUFBQyxJQUFBVSxHQUNBTCxFQUFBQSxVQUFBLGtCQUFBSyxPQ1ZBbEMsUUFBQUMsT0FBQSxZQUNBQyxXQUFBLHlCQUFBLFNBQUEsWUFBQSxtQkFBQSxTQUFBQyxFQUFBQyxFQUFBYyxHQUNBZixFQUFBZ0MsZUFBQSxXQUNBWixRQUFBQyxJQUFBckIsRUFBQWlDLGNBQ0FqQyxFQUFBaUMsY0FDQWxCLEVBQUFjLFFBQ0FLLEtBQUFsQyxFQUFBaUMsZUFDQWhCLFFBQUEsV0FDQWhCLEVBQUFNLEtBQUEsV0NSQVYsUUFBQUMsT0FBQSxZQUNBcUMsUUFBQSxpQkFBQSxTQUFBQyxHQUNBQSxFQUNBQyxLQUFBLEtBQ0F0QyxXQUFBLHNCQUNBdUMsWUFBQSxtQkFFQUQsS0FBQSxnQkFDQXRDLFdBQUEsd0JBQ0F1QyxZQUFBLHFCQUVBRCxLQUFBLGFBQ0F0QyxXQUFBLHFCQUNBdUMsWUFBQSxrQkFFQUQsS0FBQSxVQUNBdEMsV0FBQSxrQkFDQXVDLFlBQUEsa0JDakJBekMsUUFBQUMsT0FBQSxZQUNBMkIsUUFBQSxXQUFBLFFBQUEsU0FBQUMsR0FDQSxHQUFBYSxHQUFBWixJQUNBWSxHQUFBQyxRQUFBLFdBQ0EsTUFBQWQsR0FBQUUsSUFBQSxlQUVBVyxFQUFBOUIsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE1BQUFlLEdBQUFJLEtBQUEsaUJBQ0FwQixTQUFBQSxFQUNBQyxTQUFBQSxJQUNBQyxLQUFBLFNBQUE2QixHQUdBLE1BRkFGLEdBQUFHLE1BQUFELEVBQUEzQixLQUNBWSxFQUFBaUIsU0FBQUMsUUFBQUMsT0FBQSxVQUFBSixFQUFBM0IsS0FDQXlCLEVBQUFDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdhcHBMZWFybicsWyduZ1JvdXRlJ10pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHBMZWFybicpXG4gICAgLmNvbnRyb2xsZXIoXCJBcHBsaWNhdGlvbkNvbnRyb2xsZXJcIiwgZnVuY3Rpb24oJHNjb3BlLCRsb2NhdGlvbikge1xuICAgICAgICAkc2NvcGUuJG9uKCdsb2dpbicsIGZ1bmN0aW9uKGUsdXNlcikge1xuICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRVc2VyID0gdXNlcjtcbiAgICAgICAgfSk7XG4gICAgICAgICRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgZGVsZXRlICRzY29wZS5jdXJyZW50VXNlcjtcbiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG4gICAgICAgIH07XG4gICAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcExlYXJuJylcbiAgICAuY29udHJvbGxlcihcIkxvZ2luQ29udHJvbGxlclwiLCBmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLFVzZXJTdmMpIHtcbiAgICAgICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24odXNlcm5hbWUscGFzc3dvcmQpIHtcbiAgICAgICAgICAgIFVzZXJTdmMubG9naW4odXNlcm5hbWUscGFzc3dvcmQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24odXNlcikge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlci5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXIuZGF0YSkgJGxvY2F0aW9uLnBhdGgoJy8nKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwTGVhcm4nKVxuICAgIC5jb250cm9sbGVyKCdNaXNzYXRnZXNDb250cm9sbGVyJyxmdW5jdGlvbigkc2NvcGUsJGxvY2F0aW9uLE1pc3NhdGdlc1NlcnZpY2UpIHtcbiAgICAgICAgLy8kc2NvcGUubWlzc2F0Z2VCb2R5PVwiaG9sYWFhYVwiO1xuICAgICAgICBNaXNzYXRnZXNTZXJ2aWNlLmZldGNoKClcbiAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24obWlzc2F0Z2VzKXtcbiAgICAgICAgICAgICRzY29wZS5taXNzYXRnZXMgPSBtaXNzYXRnZXM7XG4gICAgICAgIH0pXG4gICAgICAgIC5lcnJvcihmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICB9KTtcblxuICAgICAgXG4gICAgICAgICRzY29wZS5lc2JvcnJhck1pc3NhdGdlID0gZnVuY3Rpb24obWlzc2F0Z2UpIHtcbiAgICAgICAgICAgIE1pc3NhdGdlc1NlcnZpY2UuZGVsZXRlKG1pc3NhdGdlLl9pZCkuc3VjY2VzcyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcbiAgICAgICAgICAgICAgICB9KTs7XG4gICAgICAgIH07XG4gICAgfSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcExlYXJuJylcbiAgICAuc2VydmljZShcIk1pc3NhdGdlc1NlcnZpY2VcIiwgZnVuY3Rpb24oJGh0dHApIHtcbiAgICAgICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldChcIi9hcGkvbWlzc2F0Z2VzXCIpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKG1pc3NhdGdlKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdChcIi9hcGkvbWlzc2F0Z2VzXCIsIG1pc3NhdGdlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kZWxldGUgPSBmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coaWQpO1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmRlbGV0ZShcIi9hcGkvbWlzc2F0Z2VzL1wiK2lkKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHBMZWFybicpXG4gICAgLmNvbnRyb2xsZXIoJ05vdU1pc3NhdGdlQ29udHJvbGxlcicsZnVuY3Rpb24oJHNjb3BlLCRsb2NhdGlvbixNaXNzYXRnZXNTZXJ2aWNlKSB7XG4gICAgICAgICRzY29wZS5hZmVnaXJNaXNzYXRnZSA9IGZ1bmN0aW9uKHBhdGF0YSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLm1pc3NhdGdlQm9keSk7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLm1pc3NhdGdlQm9keSl7XG4gICAgICAgICAgICAgICAgTWlzc2F0Z2VzU2VydmljZS5jcmVhdGUoe1xuICAgICAgICAgICAgICAgICAgICBib2R5OiRzY29wZS5taXNzYXRnZUJvZHlcbiAgICAgICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnLycpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHBMZWFybicpXG4gICAgLmNvbmZpZyhmdW5jdGlvbigkcm91dGVQcm92aWRlcikge1xuICAgICAgICAkcm91dGVQcm92aWRlclxuICAgICAgICAgICAgLndoZW4oXCIvXCIsIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTWlzc2F0Z2VzQ29udHJvbGxlcicsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtaXNzYXRnZXMuaHRtbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2hlbihcIi9ub3VtaXNzYXRnZVwiLCB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJOb3VNaXNzYXRnZUNvbnRyb2xsZXJcIixcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ25vdU1pc3NhdGdlLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oXCIvcmVnaXN0cmVcIiwge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiUmVnaXN0ZXJDb250cm9sbGVyXCIsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwicmVnaXN0ZXIuaHRtbFwiXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndoZW4oXCIvbG9naW5cIiwge1xuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiTG9naW5Db250cm9sbGVyXCIsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwibG9naW4uaHRtbFwiXG4gICAgICAgICAgICB9KTtcbiAgICB9KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwTGVhcm4nKVxuICAgIC5zZXJ2aWNlKCdVc2VyU3ZjJywgZnVuY3Rpb24oJGh0dHApIHtcbiAgICAgICAgdmFyIHN2YyA9IHRoaXM7XG4gICAgICAgIHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJyk7XG4gICAgICAgIH07XG4gICAgICAgIHN2Yy5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xuICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgc3ZjLnRva2VuID0gdmFsLmRhdGE7XG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ3gtYXV0aCddID0gdmFsLmRhdGE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=